{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CacheOptions": {
            "description": "Configure granular settings for a cache provider with this object",
            "properties": {
                "auth_pass": {
                    "description": "(`redis`) the authentication passphrase (if enabled)",
                    "type": "string"
                },
                "db": {
                    "default": 0,
                    "description": "(`redis`) the db number to use",
                    "examples": [
                        0
                    ],
                    "type": "number"
                },
                "host": {
                    "default": "localhost",
                    "description": "(`redis`) hostname",
                    "examples": [
                        "localhost"
                    ],
                    "type": "string"
                },
                "max": {
                    "default": 500,
                    "description": "(`memory`) The maximum number of keys (unique cache calls) to store in cache\n\nWhen the maximum number of keys is reached the cache will being dropping the [least-recently-used](https://github.com/isaacs/node-lru-cache) key to keep the cache at `max` size.\n\nThis will determine roughly how large in **RAM** each `memory` cache can be, based on how large your `window` criteria are. Consider this example:\n\n* all `window` criteria in a subreddit's rules are `\"window\": 100`\n* `\"max\": 500`\n* Maximum size of **each** memory cache will be `500 x 100 activities = 50,000 activities`\n  * So the shared cache would be max 50k activities and\n  * Every additional private cache (when a subreddit configures their cache separately) will also be max 50k activities",
                    "examples": [
                        500
                    ],
                    "type": "number"
                },
                "port": {
                    "default": 6379,
                    "description": "(`redis`) port to connect on",
                    "examples": [
                        6379
                    ],
                    "type": "number"
                },
                "store": {
                    "$ref": "#/definitions/CacheProvider"
                },
                "ttl": {
                    "default": 60,
                    "description": "The default TTL, in seconds, for the cache provider.\n\nCan mostly be ignored since TTLs are defined for each cache object",
                    "examples": [
                        60
                    ],
                    "type": "number"
                }
            },
            "required": [
                "store"
            ],
            "type": "object"
        },
        "CacheProvider": {
            "description": "Available cache providers",
            "enum": [
                "memory",
                "none",
                "redis"
            ],
            "type": "string"
        },
        "DiscordProviderConfig": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "discord"
                    ],
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type",
                "url"
            ],
            "type": "object"
        },
        "NotificationConfig": {
            "properties": {
                "events": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/NotificationEventConfig"
                            },
                            {
                                "items": {
                                    "enum": [
                                        "configUpdated",
                                        "eventActioned",
                                        "pollingError",
                                        "runStateChanged"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "type": "array"
                },
                "providers": {
                    "description": "A list of notification providers (Discord, etc..) to configure. Each object in the list is one provider. Multiple of the same provider can be provided but must have different names",
                    "items": {
                        "$ref": "#/definitions/DiscordProviderConfig"
                    },
                    "type": "array"
                }
            },
            "required": [
                "events",
                "providers"
            ],
            "type": "object"
        },
        "NotificationEventConfig": {
            "properties": {
                "providers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {
                        "enum": [
                            "configUpdated",
                            "eventActioned",
                            "pollingError",
                            "runStateChanged"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "providers",
                "types"
            ],
            "type": "object"
        },
        "PollingDefaults": {
            "properties": {
                "delayUntil": {
                    "description": "Delay processing Activity until it is `N` seconds old\n\nUseful if there are other bots that may process an Activity and you want this bot to run first/last/etc.\n\nIf the Activity is already `N` seconds old when it is initially retrieved no refresh of the Activity occurs (no API request is made) and it is immediately processed.",
                    "type": "number"
                },
                "interval": {
                    "default": 30,
                    "description": "Amount of time, in seconds, to wait between requests",
                    "examples": [
                        30
                    ],
                    "type": "number"
                },
                "limit": {
                    "default": 50,
                    "description": "The maximum number of Activities to get on every request",
                    "examples": [
                        50
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        }
    },
    "description": "Configuration for application-level settings IE for running the bot instance\n\n* To load a JSON configuration **from the command line** use the `-c` cli argument EX: `node src/index.js -c /path/to/JSON/config.json`\n* To load a JSON configuration **using an environmental variable** use `OPERATOR_CONFIG` EX: `OPERATOR_CONFIG=/path/to/JSON/config.json`",
    "properties": {
        "api": {
            "description": "Settings related to managing heavy API usage.",
            "properties": {
                "hardLimit": {
                    "default": 50,
                    "description": "When `api limit remaining` reaches this number the application will pause all event polling until the api limit is reset.",
                    "examples": [
                        50
                    ],
                    "type": "number"
                },
                "softLimit": {
                    "default": 250,
                    "description": "When `api limit remaining` reaches this number the application will attempt to put heavy-usage subreddits in a **slow mode** where activity processed is slowed to one every 1.5 seconds until the api limit is reset.",
                    "examples": [
                        250
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "caching": {
            "description": "Settings to configure the default caching behavior for each suberddit",
            "properties": {
                "authorTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, author activity history (Comments/Submission) should be cached\n\n* ENV => `AUTHOR_TTL`\n* ARG => `--authorTTL <sec>`",
                    "examples": [
                        60
                    ],
                    "type": "number"
                },
                "commentTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, a comment should be cached",
                    "examples": [
                        60
                    ],
                    "type": "number"
                },
                "filterCriteriaTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, to cache filter criteria results (`authorIs` and `itemIs` results)\n\nThis is especially useful if when polling high-volume comments and your checks rely on author/item filters",
                    "examples": [
                        60
                    ],
                    "type": "number"
                },
                "provider": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/CacheOptions"
                        },
                        {
                            "enum": [
                                "memory",
                                "none",
                                "redis"
                            ],
                            "type": "string"
                        }
                    ],
                    "description": "The cache provider and, optionally, a custom configuration for that provider\n\nIf not present or `null` provider will be `memory`.\n\nTo specify another `provider` but use its default configuration set this property to a string of one of the available providers: `memory`, `redis`, or `none`"
                },
                "submissionTTL": {
                    "default": 60,
                    "description": "Amount of time, in seconds, a submission should be cached",
                    "examples": [
                        60
                    ],
                    "type": "number"
                },
                "userNotesTTL": {
                    "default": 300,
                    "description": "Amount of time, in seconds, [Toolbox User Notes](https://www.reddit.com/r/toolbox/wiki/docs/usernotes) should be cached",
                    "examples": [
                        300
                    ],
                    "type": "number"
                },
                "wikiTTL": {
                    "default": 300,
                    "description": "Amount of time, in seconds, wiki content pages should be cached",
                    "examples": [
                        300
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "credentials": {
            "description": "The credentials required for the bot to interact with Reddit's API\n\n**Note:** Only `clientId` and `clientSecret` are required for initial setup (to use the oauth helper) **but ALL are required to properly run the bot.**",
            "properties": {
                "accessToken": {
                    "description": "Access token retrieved from authenticating an account with your Reddit Application\n\n* ENV => `ACCESS_TOKEN`\n* ARG => `--accessToken <token>`",
                    "examples": [
                        "p75_1c467b2"
                    ],
                    "type": "string"
                },
                "clientId": {
                    "description": "Client ID for your Reddit application\n\n* ENV => `CLIENT_ID`\n* ARG => `--clientId <id>`",
                    "examples": [
                        "f4b4df1c7b2"
                    ],
                    "type": "string"
                },
                "clientSecret": {
                    "description": "Client Secret for your Reddit application\n\n* ENV => `CLIENT_SECRET`\n* ARG => `--clientSecret <id>`",
                    "examples": [
                        "34v5q1c56ub"
                    ],
                    "type": "string"
                },
                "redirectUri": {
                    "description": "Redirect URI for your Reddit application\n\nOnly required if running ContextMod with a web interface (and after using oauth helper)\n\n* ENV => `REDIRECT_URI`\n* ARG => `--redirectUri <uri>`",
                    "examples": [
                        "http://localhost:8085"
                    ],
                    "format": "uri",
                    "type": "string"
                },
                "refreshToken": {
                    "description": "Refresh token retrieved from authenticating an account with your Reddit Application\n\n* ENV => `REFRESH_TOKEN`\n* ARG => `--refreshToken <token>`",
                    "examples": [
                        "34_f1w1v4"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "logging": {
            "description": "Settings to configure global logging defaults",
            "properties": {
                "level": {
                    "default": "verbose",
                    "description": "The minimum log level to output. The log level set will output logs at its level **and all levels above it:**\n\n * `error`\n * `warn`\n * `info`\n * `verbose`\n * `debug`\n\n Note: `verbose` will display *a lot* of information on the status/result of run rules/checks/actions etc. which is very useful for testing configurations. Once your bot is stable changing the level to `info` will reduce log noise.\n\n * ENV => `LOG_LEVEL`\n * ARG => `--logLevel <level>`",
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "verbose",
                        "warn"
                    ],
                    "examples": [
                        "verbose"
                    ],
                    "type": "string"
                },
                "path": {
                    "description": "The absolute path to a directory where rotating log files should be stored.\n\n* If not present or `null` no log files will be created\n* If `true` logs will be stored at `[working directory]/logs`\n\n* ENV => `LOG_DIR`\n* ARG => `--logDir [dir]`",
                    "examples": [
                        "/var/log/contextmod"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "notifications": {
            "$ref": "#/definitions/NotificationConfig",
            "description": "Settings to configure 3rd party notifications for when ContextMod behavior occurs"
        },
        "operator": {
            "description": "Settings related to the user(s) running this ContextMod instance and information on the bot",
            "properties": {
                "botName": {
                    "description": "The name to use when identifying the bot. Defaults to name of the authenticated Reddit account IE `u/yourBotAccount`",
                    "examples": [
                        "u/yourBotAccount"
                    ],
                    "type": "string"
                },
                "display": {
                    "description": "A **public** name to display to users of the web interface. Use this to help moderators using your bot identify who is the operator in case they need to contact you.\n\nLeave undefined for no public name to be displayed.\n\n* ENV => `OPERATOR_DISPLAY`\n* ARG => `--operatorDisplay <name>`",
                    "examples": [
                        "Moderators of r/MySubreddit"
                    ],
                    "type": "string"
                },
                "name": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "The name, or names, of the Reddit accounts, without prefix, that the operators of this bot uses.\n\nThis is used for showing more information in the web interface IE show all logs/subreddits if even not a moderator.\n\nEX -- User is /u/FoxxMD then `\"name\": [\"FoxxMD\"]`\n\n* ENV => `OPERATOR` (if list, comma-delimited)\n* ARG => `--operator <name...>`",
                    "examples": [
                        [
                            "FoxxMD",
                            "AnotherUser"
                        ]
                    ]
                }
            },
            "type": "object"
        },
        "polling": {
            "allOf": [
                {
                    "$ref": "#/definitions/PollingDefaults"
                },
                {
                    "properties": {
                        "sharedMod": {
                            "default": false,
                            "description": "If set to `true` all subreddits polling unmoderated/modqueue with default polling settings will share a request to \"r/mod\"\notherwise each subreddit will poll its own mod view\n\n* ENV => `SHARE_MOD`\n* ARG => `--shareMod`",
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ],
            "description": "Settings related to default polling configurations for subreddits"
        },
        "queue": {
            "description": "Settings related to default configurations for queue behavior for subreddits",
            "properties": {
                "maxWorkers": {
                    "default": 1,
                    "description": "Set the number of maximum concurrent workers any subreddit can use.\n\nSubreddits may define their own number of max workers in their config but the application will never allow any subreddit's max workers to be larger than the operator\n\nNOTE: Do not increase this unless you are certain you know what you are doing! The default is suitable for the majority of use cases.",
                    "examples": [
                        1
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "snoowrap": {
            "description": "Settings to control some [Snoowrap](https://github.com/not-an-aardvark/snoowrap) behavior",
            "properties": {
                "debug": {
                    "description": "Manually set the debug status for snoowrap\n\nWhen snoowrap has `debug: true` it will log the http status response of reddit api requests to at the `debug` level\n\n* Set to `true` to always output\n* Set to `false` to never output\n\nIf not present or `null` will be set based on `logLevel`\n\n* ENV => `SNOO_DEBUG`\n* ARG => `--snooDebug`",
                    "type": "boolean"
                },
                "proxy": {
                    "description": "Proxy all requests to Reddit's API through this endpoint\n\n* ENV => `PROXY`\n* ARG => `--proxy <proxyEndpoint>`",
                    "examples": [
                        "http://localhost:4443"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "subreddits": {
            "description": "Settings related to bot behavior for subreddits it is managing",
            "properties": {
                "dryRun": {
                    "default": false,
                    "description": "If `true` then all subreddits will run in dry run mode, overriding configurations\n\n* ENV => `DRYRUN`\n* ARG => `--dryRun`",
                    "examples": [
                        false
                    ],
                    "type": "boolean"
                },
                "heartbeatInterval": {
                    "default": 300,
                    "description": "Interval, in seconds, to perform application heartbeat\n\nOn heartbeat the application does several things:\n\n* Log output with current api rate remaining and other statistics\n* Tries to retrieve and parse configurations for any subreddits with invalid configuration state\n* Restarts any bots stopped/paused due to polling issues, general errors, or invalid configs (if new config is valid)\n\n* ENV => `HEARTBEAT`\n* ARG => `--heartbeat <sec>`",
                    "examples": [
                        300
                    ],
                    "type": "number"
                },
                "names": {
                    "description": "Names of subreddits for bot to run on\n\nIf not present or `null` bot will run on all subreddits it is a moderator of\n\n* ENV => `SUBREDDITS` (comma-separated)\n* ARG => `--subreddits <list...>`",
                    "examples": [
                        [
                            "mealtimevideos",
                            "programminghumor"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "wikiConfig": {
                    "default": "botconfig/contextbot",
                    "description": "The default relative url to the ContextMod wiki page EX `https://reddit.com/r/subreddit/wiki/<path>`\n\n* ENV => `WIKI_CONFIG`\n* ARG => `--wikiConfig <path>`",
                    "examples": [
                        "botconfig/contextbot"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "web": {
            "description": "Settings for the web interface",
            "properties": {
                "enabled": {
                    "default": true,
                    "description": "Whether the web server interface should be started\n\nIn most cases this does not need to be specified as the application will automatically detect if it is possible to start it --\nuse this to specify \"cli only\" behavior if you encounter errors with port/address or are paranoid\n\n* ENV => `WEB`\n* ARG => `node src/index.js run [interface]` -- interface can be `web` or `cli`",
                    "type": "boolean"
                },
                "logLevel": {
                    "description": "The default log level to filter to in the web interface\n\nIf not specified or `null` will be same as global `logLevel`",
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "verbose",
                        "warn"
                    ],
                    "type": "string"
                },
                "maxLogs": {
                    "default": 200,
                    "description": "Maximum number of log statements to keep in memory for each subreddit",
                    "examples": [
                        200
                    ],
                    "type": "number"
                },
                "port": {
                    "default": 8085,
                    "description": "The port for the web interface\n\n* ENV => `PORT`\n* ARG => `--port <number>`",
                    "examples": [
                        8085
                    ],
                    "type": "number"
                },
                "session": {
                    "description": "Settings to configure the behavior of user sessions -- the session is what the web interface uses to identify logged in users.",
                    "properties": {
                        "provider": {
                            "anyOf": [
                                {
                                    "$ref": "#/definitions/CacheOptions"
                                },
                                {
                                    "enum": [
                                        "memory",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            ],
                            "default": "memory",
                            "description": "The cache provider to use.\n\nThe default should be sufficient for almost all use cases",
                            "examples": [
                                "memory"
                            ]
                        },
                        "secret": {
                            "description": "The secret value used to encrypt session data\n\nIf provider is persistent (redis) specifying a value here will ensure sessions are valid between application restarts\n\nWhen not present or `null` a random string is generated on application start",
                            "examples": [
                                "definitelyARandomString"
                            ],
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "type": "object"
}

