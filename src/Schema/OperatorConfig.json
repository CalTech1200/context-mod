{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "CacheOptions": {
            "properties": {
                "auth_pass": {
                    "type": "string"
                },
                "db": {
                    "type": "number"
                },
                "host": {
                    "type": "string"
                },
                "max": {
                    "type": "number"
                },
                "port": {
                    "type": "number"
                },
                "store": {
                    "$ref": "#/definitions/CacheProvider"
                },
                "ttl": {
                    "type": "number"
                }
            },
            "required": [
                "store"
            ],
            "type": "object"
        },
        "CacheProvider": {
            "enum": [
                "memory",
                "none",
                "redis"
            ],
            "type": "string"
        },
        "DiscordProviderConfig": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "discord"
                    ],
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "type",
                "url"
            ],
            "type": "object"
        },
        "NotificationConfig": {
            "properties": {
                "events": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/NotificationEventConfig"
                            },
                            {
                                "items": {
                                    "enum": [
                                        "configUpdated",
                                        "eventActioned",
                                        "pollingError",
                                        "runStateChanged"
                                    ],
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        ]
                    },
                    "type": "array"
                },
                "providers": {
                    "items": {
                        "$ref": "#/definitions/DiscordProviderConfig"
                    },
                    "type": "array"
                }
            },
            "required": [
                "events",
                "providers"
            ],
            "type": "object"
        },
        "NotificationEventConfig": {
            "properties": {
                "providers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "types": {
                    "items": {
                        "enum": [
                            "configUpdated",
                            "eventActioned",
                            "pollingError",
                            "runStateChanged"
                        ],
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "required": [
                "providers",
                "types"
            ],
            "type": "object"
        },
        "PollingDefaults": {
            "properties": {
                "delayUntil": {
                    "description": "Delay processing Activity until it is `N` seconds old\n\nUseful if there are other bots that may process an Activity and you want this bot to run first/last/etc.\n\nIf the Activity is already `N` seconds old when it is initially retrieved no refresh of the Activity occurs (no API request is made) and it is immediately processed.",
                    "type": "number"
                },
                "interval": {
                    "default": 30,
                    "description": "Amount of time, in seconds, to wait between requests",
                    "examples": [
                        30
                    ],
                    "type": "number"
                },
                "limit": {
                    "default": 50,
                    "description": "The maximum number of Activities to get on every request",
                    "examples": [
                        50
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        }
    },
    "properties": {
        "api": {
            "properties": {
                "hardLimit": {
                    "type": "number"
                },
                "softLimit": {
                    "type": "number"
                }
            },
            "type": "object"
        },
        "caching": {
            "anyOf": [
                {
                    "properties": {
                        "authorTTL": {
                            "default": 10000,
                            "description": "Amount of time, in milliseconds, author activities (Comments/Submission) should be cached",
                            "examples": [
                                10000
                            ],
                            "type": "number"
                        },
                        "provider": {
                            "anyOf": [
                                {
                                    "$ref": "#/definitions/CacheOptions"
                                },
                                {
                                    "enum": [
                                        "memory",
                                        "none",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "userNotesTTL": {
                            "default": 60000,
                            "description": "Amount of time, in milliseconds, [Toolbox User Notes](https://www.reddit.com/r/toolbox/wiki/docs/usernotes) should be cached",
                            "examples": [
                                60000
                            ],
                            "type": "number"
                        },
                        "wikiTTL": {
                            "default": 300000,
                            "description": "Amount of time, in milliseconds, wiki content pages should be cached",
                            "examples": [
                                300000
                            ],
                            "type": "number"
                        }
                    },
                    "type": "object"
                },
                {
                    "enum": [
                        "memory",
                        "none",
                        "redis"
                    ],
                    "type": "string"
                }
            ]
        },
        "credentials": {
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "clientId": {
                    "type": "string"
                },
                "clientSecret": {
                    "type": "string"
                },
                "redirectUri": {
                    "type": "string"
                },
                "refreshToken": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "logging": {
            "properties": {
                "level": {
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "verbose",
                        "warn"
                    ],
                    "type": "string"
                },
                "path": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "notifications": {
            "$ref": "#/definitions/NotificationConfig"
        },
        "operator": {
            "properties": {
                "display": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "polling": {
            "allOf": [
                {
                    "$ref": "#/definitions/PollingDefaults"
                },
                {
                    "properties": {
                        "interval": {
                            "type": "number"
                        },
                        "limit": {
                            "type": "number"
                        },
                        "sharedMod": {
                            "type": "boolean"
                        }
                    },
                    "type": "object"
                }
            ]
        },
        "snoowrap": {
            "properties": {
                "debug": {
                    "type": "boolean"
                },
                "proxy": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "subreddits": {
            "properties": {
                "dryRun": {
                    "type": "boolean"
                },
                "heartbeatInterval": {
                    "type": "number"
                },
                "names": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "wikiConfig": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "web": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "logLevel": {
                    "enum": [
                        "debug",
                        "error",
                        "info",
                        "verbose",
                        "warn"
                    ],
                    "type": "string"
                },
                "maxLogs": {
                    "type": "number"
                },
                "port": {
                    "type": "number"
                },
                "session": {
                    "properties": {
                        "provider": {
                            "anyOf": [
                                {
                                    "$ref": "#/definitions/CacheOptions"
                                },
                                {
                                    "enum": [
                                        "memory",
                                        "redis"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "secret": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object"
        }
    },
    "type": "object"
}

