{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ActivityWindowCriteria": {
            "additionalProperties": false,
            "description": "The criteria used to define what range of Activity to retrieve.\n\nMay specify one, or both properties along with the `satisfyOn` property, to affect the retrieval behavior.",
            "examples": [
                {
                    "count": 100,
                    "duration": {
                        "days": 90
                    }
                }
            ],
            "minProperties": 1,
            "properties": {
                "count": {
                    "description": "The number of activities (submission/comments) to consider",
                    "examples": [
                        15
                    ],
                    "type": "number"
                },
                "duration": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "An [ISO 8601 duration string](https://en.wikipedia.org/wiki/ISO_8601#Durations) or [Day.js duration object](https://day.js.org/docs/en/durations/creating).\n\nThe duration will be subtracted from the time when the rule is run to create a time range like this:\n\nendTime = NOW  <----> startTime = (NOW - `duration`)\n\nEX `PT15M` or `{\"minutes\": 15}`\n* `endTime` = NOW (3:00PM)\n* `startTime` = (NOW - 15 minutes) = 2:45PM\n\nSo look for Activities between 2:45PM and 3:00PM",
                    "examples": [
                        "PT15M",
                        {
                            "minutes": 15
                        }
                    ]
                },
                "satisfyOn": {
                    "default": "any",
                    "description": "Define the condition under which both criteria are considered met\n\n**If `any` then it will retrieve Activities until one of the criteria is met, whichever occurs first**\n\nEX `{count: 100, duration: {days: 90}}`:\n* If 90 days of activities = 40 activities => returns 40 activities\n* If 100 activities is only 20 days => 100 activities\n\n**If `all` then both criteria must be met.**\n\nEffectively, whichever criteria produces the most Activities...\n\nEX `{count: 100, duration: {days: 90}}`:\n* If at 90 days of activities => 40 activities, continue retrieving results until 100 => results in >90 days of activities\n* If at 100 activities => 20 days of activities, continue retrieving results until 90 days => results in >100 activities",
                    "enum": [
                        "all",
                        "any"
                    ],
                    "examples": [
                        "any"
                    ],
                    "type": "string"
                }
            },
            "type": "object"
        },
        "AttributionCriteria": {
            "properties": {
                "minActivityCount": {
                    "default": 5,
                    "description": "The minimum number of activities that must exist for this criteria to run",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "threshold": {
                    "default": "10%",
                    "description": "The number or percentage to trigger this rule at\n\n* If `threshold` is a `number` then it is the absolute number of attribution instances to trigger at\n* If `threshold` is a `string` with percentage (EX `40%`) then it is the percentage of the total (see `lookAt`) this attribution must reach to trigger",
                    "type": [
                        "string",
                        "number"
                    ]
                },
                "thresholdOn": {
                    "default": "all",
                    "description": "What activities to use for total count when determining what percentage an attribution comprises\n\nEX:\n\nAuthor has 100 activities, 40 are submissions and 60 are comments\n\n* If `submission` then if 10 submission are for Youtube Channel A then percentage => 10/40 = 25%\n* If `all` then if 10 submission are for Youtube Channel A then percentage => 10/100 = 10%",
                    "enum": [
                        "all",
                        "submissions"
                    ],
                    "type": "string"
                },
                "window": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ActivityWindowCriteria"
                        },
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ]
                }
            },
            "required": [
                "threshold",
                "window"
            ],
            "type": "object"
        },
        "AttributionJSONConfig": {
            "description": "Aggregates all of the domain/media accounts attributed to an author's Submission history. If any domain is over the threshold the rule is triggered\n\nAvailable data for [Action templating](https://github.com/FoxxMD/reddit-context-bot#action-templating):\n\n```\ncount      => Total number of repeat Submissions\nthreshold  => The threshold you configured for this Rule to trigger\nurl        => Url of the submission that triggered the rule\n```",
            "properties": {
                "aggregateMediaDomains": {
                    "default": false,
                    "description": "Should the rule aggregate recognized media domains into the parent domain?\n\nSubmissions to major media domains (youtube, vimeo) can be identified by individual Channel/Author...\n\n* If `false` then aggregate will occur at the channel level IE Youtube Channel A (2 counts), Youtube Channel B  (3 counts)\n* If `true` then then aggregation will occur at the domain level IE youtube.com (5 counts)",
                    "type": "boolean"
                },
                "authorIs": {
                    "$ref": "#/definitions/AuthorOptions",
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "examples": [
                        {
                            "include": [
                                {
                                    "flairText": [
                                        "Contributor",
                                        "Veteran"
                                    ]
                                },
                                {
                                    "isMod": true
                                }
                            ]
                        }
                    ]
                },
                "criteria": {
                    "description": "A list threshold-window values to test attribution against\n\nIf none is provided the default set used is:\n\n```\nthreshold: 10%\nwindow: 100\n```",
                    "items": {
                        "$ref": "#/definitions/AttributionCriteria"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "criteriaJoin": {
                    "description": "* If `OR` then any set of AttributionCriteria that produce an Attribution over the threshold will trigger the rule.\n* If `AND` then all AttributionCriteria sets must product an Attribution over the threshold to trigger the rule.",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                },
                "exclude": {
                    "description": "Do not include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "include": {
                    "description": "Only include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "includeSelf": {
                    "default": false,
                    "description": "Include reddit `self.*` domains in aggregation?\n\nSelf-posts are aggregated under the domain `self.[subreddit]`. If you wish to include these domains in aggregation set this to `true`",
                    "type": "boolean"
                },
                "itemIs": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/SubmissionState"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/CommentState"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "A list of criteria to test the state of the `Activity` against before running the Rule.\n\nIf any set of criteria passes the Rule will be run. If the criteria fails then the Rule is skipped."
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "attribution"
                    ],
                    "type": "string"
                },
                "lookAt": {
                    "default": "all",
                    "description": "Determines which type of attribution to look at\n\n* If `media` then only the author's submission history which reddit recognizes as media (youtube, vimeo, etc.) will be considered\n* If `all` then all domains (EX youtube.com, twitter.com) from the author's submission history will be considered",
                    "enum": [
                        "all",
                        "media"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "examples": [
                        "myNewRule"
                    ],
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "useSubmissionAsReference": {
                    "default": true,
                    "description": "If activity is a Submission and is a link (not self-post) then only look at Submissions that contain this link, otherwise consider all activities.",
                    "type": "boolean"
                }
            },
            "required": [
                "kind"
            ],
            "type": "object"
        },
        "AuthorCriteria": {
            "additionalProperties": false,
            "description": "Criteria with which to test against the author of an Activity. The outcome of the test is based on:\n\n1. All present properties passing and\n2. If a property is a list then any value from the list matching",
            "examples": [
                {
                    "flairText": [
                        "Contributor",
                        "Veteran"
                    ],
                    "isMod": true,
                    "name": [
                        "FoxxMD",
                        "AnotherUser"
                    ]
                }
            ],
            "minProperties": 1,
            "properties": {
                "flairCssClass": {
                    "description": "A list of (user) flair css class values from the subreddit to match against",
                    "examples": [
                        "red"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "flairText": {
                    "description": "A list of (user) flair text values from the subreddit to match against",
                    "examples": [
                        "Approved"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "isMod": {
                    "description": "Is the author a moderator?",
                    "type": "boolean"
                },
                "name": {
                    "description": "A list of reddit usernames (case-insensitive) to match against. Do not include the \"u/\" prefix\n\n EX to match against /u/FoxxMD and /u/AnotherUser use [\"FoxxMD\",\"AnotherUser\"]",
                    "examples": [
                        "FoxxMD",
                        "AnotherUser"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "userNotes": {
                    "description": "A list of UserNote properties to check against the User Notes attached to this Author in this Subreddit (must have Toolbox enabled and used User Notes at least once)",
                    "items": {
                        "$ref": "#/definitions/UserNoteCriteria"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthorOptions": {
            "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
            "examples": [
                {
                    "include": [
                        {
                            "flairText": [
                                "Contributor",
                                "Veteran"
                            ]
                        },
                        {
                            "isMod": true
                        }
                    ]
                }
            ],
            "properties": {
                "exclude": {
                    "description": "Only runs if include is not present. Will \"pass\" if any of set of the AuthorCriteria does not pass",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "include": {
                    "description": "Will \"pass\" if any set of AuthorCriteria passes",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                }
            },
            "type": "object"
        },
        "AuthorRuleJSONConfig": {
            "properties": {
                "authorIs": {
                    "$ref": "#/definitions/AuthorOptions",
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "examples": [
                        {
                            "include": [
                                {
                                    "flairText": [
                                        "Contributor",
                                        "Veteran"
                                    ]
                                },
                                {
                                    "isMod": true
                                }
                            ]
                        }
                    ]
                },
                "exclude": {
                    "description": "Only runs if include is not present. Will \"pass\" if any of set of the AuthorCriteria does not pass",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "include": {
                    "description": "Will \"pass\" if any set of AuthorCriteria passes",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "itemIs": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/SubmissionState"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/CommentState"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "A list of criteria to test the state of the `Activity` against before running the Rule.\n\nIf any set of criteria passes the Rule will be run. If the criteria fails then the Rule is skipped."
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "author"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "examples": [
                        "myNewRule"
                    ],
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                }
            },
            "required": [
                "exclude",
                "include",
                "kind"
            ],
            "type": "object"
        },
        "CommentState": {
            "description": "Different attributes a `Comment` can be in. Only include a property if you want to check it.",
            "examples": [
                {
                    "op": true,
                    "removed": false
                }
            ],
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "distinguished": {
                    "type": "boolean"
                },
                "locked": {
                    "type": "boolean"
                },
                "op": {
                    "type": "boolean"
                },
                "removed": {
                    "type": "boolean"
                },
                "spam": {
                    "type": "boolean"
                },
                "stickied": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "CommentThresholdCriteria": {
            "properties": {
                "asOp": {
                    "description": "If `true` then when threshold...\n\n* is `number` it will be number of comments where author is OP\n* is `percent` it will be **percent of total comments where author is OP**",
                    "type": "boolean"
                },
                "condition": {
                    "enum": [
                        "<",
                        "<=",
                        ">",
                        ">="
                    ],
                    "examples": [
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "type": "string"
                },
                "threshold": {
                    "default": "10%",
                    "description": "The number or percentage to trigger this criteria at\n\n* If `threshold` is a `number` then it is the absolute number of items to trigger at\n* If `threshold` is a `string` with percentage (EX `40%`) then it is the percentage of the total this item must reach to trigger",
                    "examples": [
                        "10%",
                        15
                    ],
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "required": [
                "condition",
                "threshold"
            ],
            "type": "object"
        },
        "DurationObject": {
            "additionalProperties": false,
            "description": "A [Day.js duration object](https://day.js.org/docs/en/durations/creating)",
            "examples": [
                {
                    "hours": 1,
                    "minutes": 30
                }
            ],
            "minProperties": 1,
            "properties": {
                "days": {
                    "examples": [
                        7
                    ],
                    "type": "number"
                },
                "hours": {
                    "examples": [
                        4
                    ],
                    "type": "number"
                },
                "minutes": {
                    "examples": [
                        50
                    ],
                    "type": "number"
                },
                "months": {
                    "examples": [
                        3
                    ],
                    "type": "number"
                },
                "seconds": {
                    "examples": [
                        15
                    ],
                    "type": "number"
                },
                "weeks": {
                    "examples": [
                        2
                    ],
                    "type": "number"
                },
                "years": {
                    "examples": [
                        0
                    ],
                    "type": "number"
                }
            },
            "type": "object"
        },
        "HistoryCriteria": {
            "description": "If both `submission` and `comment` are defined then criteria will only trigger if BOTH thresholds are met",
            "properties": {
                "comment": {
                    "$ref": "#/definitions/CommentThresholdCriteria"
                },
                "minActivityCount": {
                    "default": 5,
                    "description": "The minimum number of activities that must exist from the `window` results for this criteria to run",
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "submission": {
                    "$ref": "#/definitions/ThresholdCriteria"
                },
                "window": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ActivityWindowCriteria"
                        },
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "description": "Window defining Activities to consider (both Comment/Submission)"
                }
            },
            "required": [
                "window"
            ],
            "type": "object"
        },
        "HistoryJSONConfig": {
            "description": "Aggregates an Author's submission and comment history. Rule can be triggered on count/percent of total (for either or both comment/sub totals) as well as comment OP total.\n\nAvailable data for [Action templating](https://github.com/FoxxMD/reddit-context-bot#action-templating):\n\n```\nactivityTotal    => Total number of activities\nsubmissionTotal  => Total number of submissions\ncommentTotal     => Total number of comments\nopTotal          => Total number of comments as OP\nthresholdSummary => A text summary of the first Criteria triggered with totals/percentages\ncriteria         => The ThresholdCriteria object\nwindow           => A text summary of the range of Activities considered (# of Items if number, time range if Duration)\n```",
            "properties": {
                "authorIs": {
                    "$ref": "#/definitions/AuthorOptions",
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "examples": [
                        {
                            "include": [
                                {
                                    "flairText": [
                                        "Contributor",
                                        "Veteran"
                                    ]
                                },
                                {
                                    "isMod": true
                                }
                            ]
                        }
                    ]
                },
                "criteria": {
                    "description": "A list threshold-window values to test activities against.",
                    "items": {
                        "$ref": "#/definitions/HistoryCriteria"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "criteriaJoin": {
                    "description": "* If `OR` then any set of Criteria that pass will trigger the Rule\n* If `AND` then all Criteria sets must pass to trigger the Rule",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                },
                "exclude": {
                    "description": "Do not include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "include": {
                    "description": "Only include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "itemIs": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/SubmissionState"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/CommentState"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "A list of criteria to test the state of the `Activity` against before running the Rule.\n\nIf any set of criteria passes the Rule will be run. If the criteria fails then the Rule is skipped."
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "history"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "examples": [
                        "myNewRule"
                    ],
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                }
            },
            "required": [
                "criteria",
                "kind"
            ],
            "type": "object"
        },
        "RecentActivityRuleJSONConfig": {
            "description": "Checks a user's history for any Activity (Submission/Comment) in the subreddits specified in thresholds\n\nAvailable data for [Action templating](https://github.com/FoxxMD/reddit-context-bot#action-templating):\n\n```\nsummary    => comma-deliminated list of subreddits that hit the threshold and their count EX subredditA(1), subredditB(4),...\nsubCount   => Total number of subreddits that hit the threshold\ntotalCount => Total number of all activity occurrences in subreddits\n```",
            "properties": {
                "authorIs": {
                    "$ref": "#/definitions/AuthorOptions",
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "examples": [
                        {
                            "include": [
                                {
                                    "flairText": [
                                        "Contributor",
                                        "Veteran"
                                    ]
                                },
                                {
                                    "isMod": true
                                }
                            ]
                        }
                    ]
                },
                "itemIs": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/SubmissionState"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/CommentState"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "A list of criteria to test the state of the `Activity` against before running the Rule.\n\nIf any set of criteria passes the Rule will be run. If the criteria fails then the Rule is skipped."
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "recentActivity"
                    ],
                    "examples": [
                        "recentActivity"
                    ],
                    "type": "string"
                },
                "lookAt": {
                    "description": "If present restricts the activities that are considered for count from SubThreshold",
                    "enum": [
                        "comments",
                        "submissions"
                    ],
                    "examples": [
                        "submissions",
                        "comments"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "examples": [
                        "myNewRule"
                    ],
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "thresholds": {
                    "description": "A list of subreddits/count criteria that may trigger this rule. ANY SubThreshold will trigger this rule.",
                    "items": {
                        "$ref": "#/definitions/SubThreshold"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "useSubmissionAsReference": {
                    "default": true,
                    "description": "If activity is a Submission and is a link (not self-post) then only look at Submissions that contain this link, otherwise consider all activities.",
                    "type": "boolean"
                },
                "window": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ActivityWindowCriteria"
                        },
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "default": 15,
                    "description": "Criteria for defining what set of activities should be considered.\n\nThe value of this property may be either count OR duration -- to use both write it as an `ActivityWindowCriteria`"
                }
            },
            "required": [
                "kind",
                "thresholds"
            ],
            "type": "object"
        },
        "RepeatActivityJSONConfig": {
            "description": "Checks a user's history for Submissions with identical content\n\nAvailable data for [Action templating](https://github.com/FoxxMD/reddit-context-bot#action-templating):\n\n```\ncount      => Total number of repeat Submissions\nthreshold  => The threshold you configured for this Rule to trigger\nurl        => Url of the submission that triggered the rule\n```",
            "properties": {
                "authorIs": {
                    "$ref": "#/definitions/AuthorOptions",
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "examples": [
                        {
                            "include": [
                                {
                                    "flairText": [
                                        "Contributor",
                                        "Veteran"
                                    ]
                                },
                                {
                                    "isMod": true
                                }
                            ]
                        }
                    ]
                },
                "exclude": {
                    "description": "Do not include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "gapAllowance": {
                    "description": "The number of allowed non-identical Submissions between identical Submissions that can be ignored when checking against the threshold value",
                    "type": "number"
                },
                "include": {
                    "description": "Only include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "itemIs": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/definitions/SubmissionState"
                            },
                            "type": "array"
                        },
                        {
                            "items": {
                                "$ref": "#/definitions/CommentState"
                            },
                            "type": "array"
                        }
                    ],
                    "description": "A list of criteria to test the state of the `Activity` against before running the Rule.\n\nIf any set of criteria passes the Rule will be run. If the criteria fails then the Rule is skipped."
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "repeatActivity"
                    ],
                    "type": "string"
                },
                "lookAt": {
                    "default": "all",
                    "description": "If present determines which activities to consider for gapAllowance.\n\n* If `submissions` then only the author's submission history is considered IE gapAllowance = 2  ===> can have gap of two submissions between repeats\n* If `all` then the author's entire history (submissions/comments) is considered IE gapAllowance = 2  ===> can only have gap of two activities (submissions or comments) between repeats",
                    "enum": [
                        "all",
                        "submissions"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "examples": [
                        "myNewRule"
                    ],
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "threshold": {
                    "default": 5,
                    "description": "The number of repeat submissions that will trigger the rule",
                    "type": "number"
                },
                "useSubmissionAsReference": {
                    "default": true,
                    "description": "If activity is a Submission and is a link (not self-post) then only look at Submissions that contain this link, otherwise consider all activities.",
                    "type": "boolean"
                },
                "window": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/ActivityWindowCriteria"
                        },
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "default": 15,
                    "description": "Criteria for defining what set of activities should be considered.\n\nThe value of this property may be either count OR duration -- to use both write it as an `ActivityWindowCriteria`"
                }
            },
            "required": [
                "kind"
            ],
            "type": "object"
        },
        "SubThreshold": {
            "additionalProperties": false,
            "description": "At least one count property must be present. If both are present then either can trigger the rule",
            "minProperties": 1,
            "properties": {
                "count": {
                    "description": "The number of activities in each subreddit from the list that will trigger this rule",
                    "examples": [
                        1
                    ],
                    "minimum": 1,
                    "type": "number"
                },
                "subreddits": {
                    "description": "A list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        [
                            "mealtimevideos",
                            "askscience"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 2,
                    "type": "array"
                },
                "totalCount": {
                    "description": "The total number of activities across all listed subreddits that will trigger this rule",
                    "examples": [
                        1
                    ],
                    "minimum": 1,
                    "type": "number"
                }
            },
            "required": [
                "subreddits"
            ],
            "type": "object"
        },
        "SubmissionState": {
            "description": "Different attributes a `Submission` can be in. Only include a property if you want to check it.",
            "examples": [
                {
                    "over_18": true,
                    "removed": false
                }
            ],
            "properties": {
                "approved": {
                    "type": "boolean"
                },
                "distinguished": {
                    "type": "boolean"
                },
                "is_self": {
                    "type": "boolean"
                },
                "locked": {
                    "type": "boolean"
                },
                "over_18": {
                    "description": "NSFW",
                    "type": "boolean"
                },
                "pinned": {
                    "type": "boolean"
                },
                "removed": {
                    "type": "boolean"
                },
                "spam": {
                    "type": "boolean"
                },
                "spoiler": {
                    "type": "boolean"
                },
                "stickied": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "ThresholdCriteria": {
            "properties": {
                "condition": {
                    "enum": [
                        "<",
                        "<=",
                        ">",
                        ">="
                    ],
                    "examples": [
                        ">",
                        ">=",
                        "<",
                        "<="
                    ],
                    "type": "string"
                },
                "threshold": {
                    "default": "10%",
                    "description": "The number or percentage to trigger this criteria at\n\n* If `threshold` is a `number` then it is the absolute number of items to trigger at\n* If `threshold` is a `string` with percentage (EX `40%`) then it is the percentage of the total this item must reach to trigger",
                    "examples": [
                        "10%",
                        15
                    ],
                    "type": [
                        "string",
                        "number"
                    ]
                }
            },
            "required": [
                "condition",
                "threshold"
            ],
            "type": "object"
        },
        "UserNoteCriteria": {
            "properties": {
                "count": {
                    "default": 1,
                    "description": "Number of occurrences of this type. Ignored if `search` is `current`",
                    "examples": [
                        1
                    ],
                    "type": "number"
                },
                "order": {
                    "default": "descending",
                    "description": "Time-based order to search Notes in for `consecutive` search",
                    "enum": [
                        "ascending",
                        "descending"
                    ],
                    "examples": [
                        "descending"
                    ],
                    "type": "string"
                },
                "search": {
                    "default": "current",
                    "description": "* If `current` then only the most recent note is checked\n* If `consecutive` then `count` number of `type` notes must be found in a row, based on `order` direction\n* If `total` then `count` number of `type` must be found within all notes",
                    "enum": [
                        "consecutive",
                        "current",
                        "total"
                    ],
                    "examples": [
                        "current"
                    ],
                    "type": "string"
                },
                "type": {
                    "description": "User Note type key",
                    "examples": [
                        "spamwarn"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "type"
            ],
            "type": "object"
        }
    },
    "description": "A RuleSet is a \"nested\" set of `Rule` objects that can be used to create more complex AND/OR behavior. Think of the outcome of a `RuleSet` as the result of all of its run `Rule` objects (based on `condition`)",
    "properties": {
        "condition": {
            "default": "AND",
            "description": "Under what condition should a set of run `Rule` objects be considered \"successful\"?\n\nIf `OR` then **any** triggered `Rule` object results in success.\n\nIf `AND` then **all** `Rule` objects must be triggered to result in success.",
            "enum": [
                "AND",
                "OR"
            ],
            "examples": [
                "AND"
            ],
            "type": "string"
        },
        "rules": {
            "description": "Can be `Rule` or the `name` of any **named** `Rule` in your subreddit's configuration",
            "items": {
                "anyOf": [
                    {
                        "$ref": "#/definitions/RecentActivityRuleJSONConfig"
                    },
                    {
                        "$ref": "#/definitions/RepeatActivityJSONConfig"
                    },
                    {
                        "$ref": "#/definitions/AuthorRuleJSONConfig"
                    },
                    {
                        "$ref": "#/definitions/AttributionJSONConfig"
                    },
                    {
                        "$ref": "#/definitions/HistoryJSONConfig"
                    },
                    {
                        "type": "string"
                    }
                ]
            },
            "minItems": 1,
            "type": "array"
        }
    },
    "required": [
        "rules"
    ],
    "type": "object"
}

