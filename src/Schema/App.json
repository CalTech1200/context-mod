{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "definitions": {
        "ActivityWindowCriteria": {
            "additionalProperties": false,
            "description": "If both properties are defined then the first criteria met will be used IE if # of activities = count before duration is reached then count will be used, or vice versa",
            "minProperties": 1,
            "properties": {
                "count": {
                    "description": "The number of activities (submission/comments) to consider",
                    "type": "number"
                },
                "duration": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "An ISO 8601 duration or Day.js duration object.\n\nThe duration will be subtracted from the time when the rule is run to create a time range like this:\n\nendTime = NOW  <----> startTime = (NOW - duration)\n\nEX endTime = 3:00PM <----> startTime = (NOW - 15 minutes) = 2:45PM -- so look for activities between 2:45PM and 3:00PM",
                    "examples": [
                        "PT1M",
                        {
                            "minutes": 15
                        }
                    ]
                }
            },
            "propertyOrder": [
                "count",
                "duration"
            ],
            "type": "object"
        },
        "AuthorCriteria": {
            "additionalProperties": false,
            "description": "Criteria with which to test against the author of an Activity. The outcome of the test is based on:\n\n1. All present properties passing and\n2. If a property is a list then any value from the list matching",
            "minProperties": 1,
            "properties": {
                "flairCssClass": {
                    "description": "A list of (user) flair css class values from the subreddit to match against",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "flairText": {
                    "description": "A list of (user) flair text values from the subreddit to match against",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "isMod": {
                    "description": "Is the author a moderator?",
                    "type": "boolean"
                },
                "name": {
                    "description": "A list of reddit usernames (case-insensitive) to match against. Do not include the \"u/\" prefix\n\n EX to match against /u/FoxxMD and /u/AnotherUser use [\"FoxxMD\",\"AnotherUser\"]",
                    "examples": [
                        "FoxxMD",
                        "AnotherUser"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                }
            },
            "propertyOrder": [
                "name",
                "flairCssClass",
                "flairText",
                "isMod"
            ],
            "type": "object"
        },
        "AuthorOptions": {
            "additionalProperties": false,
            "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
            "minProperties": 1,
            "properties": {
                "exclude": {
                    "description": "Only runs if include is not present. Will \"pass\" if any of set of the AuthorCriteria does not pass",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "include": {
                    "description": "Will \"pass\" if any set of AuthorCriteria passes",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                }
            },
            "propertyOrder": [
                "include",
                "exclude"
            ],
            "type": "object"
        },
        "AuthorRuleJSONConfig": {
            "properties": {
                "authors": {
                    "$ref": "#/definitions/AuthorOptions",
                    "additionalProperties": false,
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "minProperties": 1
                },
                "exclude": {
                    "description": "Only runs if include is not present. Will \"pass\" if any of set of the AuthorCriteria does not pass",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "include": {
                    "description": "Will \"pass\" if any set of AuthorCriteria passes",
                    "items": {
                        "$ref": "#/definitions/AuthorCriteria"
                    },
                    "type": "array"
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "author"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "kind",
                "include",
                "exclude",
                "name",
                "authors"
            ],
            "required": [
                "exclude",
                "include",
                "kind"
            ],
            "type": "object"
        },
        "CheckJSONConfig": {
            "description": "An object consisting of Rules (tests) and Actions to perform if Rules are triggered",
            "properties": {
                "actions": {
                    "description": "The actions to run after the check is successfully triggered. ALL actions will run in the order they are listed",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/FlairActionJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/CommentActionJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/LockActionJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/RemoveActionJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/ReportActionJSONConfig"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "condition": {
                    "default": "AND",
                    "description": "Under what condition should a set of rules be considered \"successful\"?\n\nIf \"OR\" then ANY triggered rule results in success.\n\nIf \"AND\" then ALL rules must be triggered to result in success.",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "kind": {
                    "description": "The type of event (new submission or new comment) this check should be run against",
                    "enum": [
                        "comment",
                        "submission"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "Friendly name for this Check EX \"crosspostSpamCheck\"\n\nCan only contain letters, numbers, underscore, spaces, and dashes",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "rules": {
                    "description": "Rules are run in the order found in configuration. Can be Rules or RuleSets",
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/RecentActivityRuleJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/RepeatSubmissionJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/AuthorRuleJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/RuleSetJSONConfig"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "propertyOrder": [
                "kind",
                "rules",
                "actions",
                "name",
                "description",
                "condition"
            ],
            "required": [
                "actions",
                "kind",
                "name",
                "rules"
            ],
            "type": "object"
        },
        "CommentActionJSONConfig": {
            "description": "Reply to the Activity. For a submission the reply will be a top-level comment.",
            "properties": {
                "content": {
                    "description": "The Content to submit for this Action. Content is interpreted as reddit-flavored Markdown.\n\nIf value starts with 'wiki:' then the proceeding value will be used to get a wiki page\n\nEX \"wiki:botconfig/mybot\" tries to get https://reddit.com/mySubredditExample/wiki/botconfig/mybot\n\nEX \"this is plain text\"\n\nEX \"this is **bold** markdown text\"",
                    "examples": [
                        "this is plain text",
                        "this is **bold** markdown text",
                        "wiki:botconfig/acomment"
                    ],
                    "type": "string"
                },
                "distinguish": {
                    "description": "Distinguish the comment after creation?",
                    "type": "boolean"
                },
                "kind": {
                    "description": "The type of action that will be performed",
                    "enum": [
                        "comment",
                        "flair",
                        "lock",
                        "remove",
                        "report"
                    ],
                    "type": "string"
                },
                "lock": {
                    "description": "Lock the comment after creation?",
                    "type": "boolean"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this Action. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "sticky": {
                    "description": "Stick the comment after creation?",
                    "type": "boolean"
                }
            },
            "propertyOrder": [
                "lock",
                "sticky",
                "distinguish",
                "content",
                "kind",
                "name"
            ],
            "required": [
                "content",
                "kind"
            ],
            "type": "object"
        },
        "DurationObject": {
            "additionalProperties": false,
            "description": "A Day.js duration object\n\nhttps://day.js.org/docs/en/durations/creating",
            "minProperties": 1,
            "properties": {
                "days": {
                    "type": "number"
                },
                "hours": {
                    "type": "number"
                },
                "minutes": {
                    "type": "number"
                },
                "months": {
                    "type": "number"
                },
                "seconds": {
                    "type": "number"
                },
                "weeks": {
                    "type": "number"
                },
                "years": {
                    "type": "number"
                }
            },
            "propertyOrder": [
                "seconds",
                "minutes",
                "hours",
                "days",
                "weeks",
                "months",
                "years"
            ],
            "type": "object"
        },
        "FlairActionJSONConfig": {
            "description": "Flair the Submission",
            "properties": {
                "css": {
                    "description": "The text of the css class of the flair to apply",
                    "type": "string"
                },
                "kind": {
                    "description": "The type of action that will be performed",
                    "enum": [
                        "comment",
                        "flair",
                        "lock",
                        "remove",
                        "report"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this Action. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "text": {
                    "description": "The text of the flair to apply",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "text",
                "css",
                "name",
                "kind"
            ],
            "required": [
                "kind"
            ],
            "type": "object"
        },
        "LockActionJSONConfig": {
            "description": "Lock the Activity",
            "properties": {
                "kind": {
                    "description": "The type of action that will be performed",
                    "enum": [
                        "comment",
                        "flair",
                        "lock",
                        "remove",
                        "report"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this Action. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "name",
                "kind"
            ],
            "required": [
                "kind"
            ],
            "type": "object"
        },
        "PollingOptions": {
            "description": "You may specify polling options independently for submissions/comments",
            "properties": {
                "comments": {
                    "description": "Polling options for comment events",
                    "properties": {
                        "interval": {
                            "default": 10000,
                            "description": "Amount of time, in milliseconds, to wait between requests for new comments",
                            "type": "number"
                        },
                        "limit": {
                            "default": 10,
                            "description": "The number of new comments to pull on every request",
                            "type": "number"
                        }
                    },
                    "propertyOrder": [
                        "limit",
                        "interval"
                    ],
                    "type": "object"
                },
                "submissions": {
                    "description": "Polling options for submission events",
                    "properties": {
                        "interval": {
                            "default": 10000,
                            "description": "Amount of time, in milliseconds, to wait between requests to /r/subreddit/new",
                            "type": "number"
                        },
                        "limit": {
                            "default": 10,
                            "description": "The number of submissions to pull from /r/subreddit/new on every request",
                            "type": "number"
                        }
                    },
                    "propertyOrder": [
                        "limit",
                        "interval"
                    ],
                    "type": "object"
                }
            },
            "propertyOrder": [
                "submissions",
                "comments"
            ],
            "type": "object"
        },
        "RecentActivityRuleJSONConfig": {
            "description": "Checks a user's history for any Activity (Submission/Comment) in the subreddits specified in thresholds\n\nAvailable data for [Action templating](https://github.com/FoxxMD/reddit-context-bot#action-templating):\n\n```\nsummary    => comma-deliminated list of subreddits that hit the threshold and their count EX subredditA(1), subredditB(4),...\nsubCount   => Total number of subreddits that hit the threshold\ntotalCount => Total number of all activity occurrences in subreddits\n```",
            "properties": {
                "authors": {
                    "$ref": "#/definitions/AuthorOptions",
                    "additionalProperties": false,
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "minProperties": 1
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "recentActivity"
                    ],
                    "type": "string"
                },
                "lookAt": {
                    "description": "If present restricts the activities that are considered for count from SubThreshold",
                    "enum": [
                        "comments",
                        "submissions"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "thresholds": {
                    "description": "A list of subreddits/count criteria that may trigger this rule. ANY SubThreshold will trigger this rule.",
                    "items": {
                        "$ref": "#/definitions/SubThreshold"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "useSubmissionAsReference": {
                    "default": true,
                    "description": "If activity is a Submission and is a link (not self-post) then only look at Submissions that contain this link, otherwise consider all activities.",
                    "type": "boolean"
                },
                "window": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "$ref": "#/definitions/ActivityWindowCriteria"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "default": 15,
                    "description": "Criteria for defining what set of activities should be considered.\n\nThe value of this property may be either count OR duration -- to use both write it as an ActivityWindowCriteria\n\nSee ActivityWindowCriteria for descriptions of what count/duration do",
                    "examples": [
                        15,
                        "PT1M",
                        {
                            "count": 10
                        },
                        {
                            "duration": {
                                "hours": 5
                            }
                        },
                        {
                            "count": 5,
                            "duration": {
                                "minutes": 15
                            }
                        }
                    ]
                }
            },
            "propertyOrder": [
                "kind",
                "lookAt",
                "thresholds",
                "window",
                "useSubmissionAsReference",
                "name",
                "authors"
            ],
            "required": [
                "kind",
                "thresholds"
            ],
            "type": "object"
        },
        "RemoveActionJSONConfig": {
            "description": "Remove the Activity",
            "properties": {
                "kind": {
                    "description": "The type of action that will be performed",
                    "enum": [
                        "comment",
                        "flair",
                        "lock",
                        "remove",
                        "report"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this Action. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "name",
                "kind"
            ],
            "required": [
                "kind"
            ],
            "type": "object"
        },
        "RepeatSubmissionJSONConfig": {
            "description": "Checks a user's history for Submissions with identical content\n\nAvailable data for [Action templating](https://github.com/FoxxMD/reddit-context-bot#action-templating):\n\n```\ncount      => Total number of repeat Submissions\nthreshold  => The threshold you configured for this Rule to trigger\nurl        => Url of the submission that triggered the rule\n```",
            "properties": {
                "authors": {
                    "$ref": "#/definitions/AuthorOptions",
                    "additionalProperties": false,
                    "description": "If present then these Author criteria are checked before running the rule. If criteria fails then the rule is skipped.",
                    "minProperties": 1
                },
                "exclude": {
                    "description": "Do not include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "gapAllowance": {
                    "description": "The number of allowed non-identical Submissions between identical Submissions that can be ignored when checking against the threshold value",
                    "type": "number"
                },
                "include": {
                    "description": "Only include Submissions from this list of Subreddits.\n\nA list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                },
                "kind": {
                    "description": "The kind of rule to run",
                    "enum": [
                        "repeatSubmission"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this rule. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes\n\nname is used to reference Rule result data during Action content templating. See CommentAction or ReportAction for more details.",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                },
                "threshold": {
                    "default": 5,
                    "description": "The number of repeat submissions that will trigger the rule",
                    "type": "number"
                },
                "useSubmissionAsReference": {
                    "default": true,
                    "description": "If activity is a Submission and is a link (not self-post) then only look at Submissions that contain this link, otherwise consider all activities.",
                    "type": "boolean"
                },
                "window": {
                    "anyOf": [
                        {
                            "$ref": "#/definitions/DurationObject"
                        },
                        {
                            "$ref": "#/definitions/ActivityWindowCriteria"
                        },
                        {
                            "type": [
                                "string",
                                "number"
                            ]
                        }
                    ],
                    "default": 15,
                    "description": "Criteria for defining what set of activities should be considered.\n\nThe value of this property may be either count OR duration -- to use both write it as an ActivityWindowCriteria\n\nSee ActivityWindowCriteria for descriptions of what count/duration do",
                    "examples": [
                        15,
                        "PT1M",
                        {
                            "count": 10
                        },
                        {
                            "duration": {
                                "hours": 5
                            }
                        },
                        {
                            "count": 5,
                            "duration": {
                                "minutes": 15
                            }
                        }
                    ]
                }
            },
            "propertyOrder": [
                "kind",
                "threshold",
                "gapAllowance",
                "include",
                "exclude",
                "window",
                "useSubmissionAsReference",
                "name",
                "authors"
            ],
            "required": [
                "kind"
            ],
            "type": "object"
        },
        "ReportActionJSONConfig": {
            "description": "Report the Activity",
            "properties": {
                "content": {
                    "description": "The text of the report. If longer than 100 characters will be truncated to \"[content]...\"",
                    "type": "string"
                },
                "kind": {
                    "description": "The type of action that will be performed",
                    "enum": [
                        "comment",
                        "flair",
                        "lock",
                        "remove",
                        "report"
                    ],
                    "type": "string"
                },
                "name": {
                    "description": "An optional, but highly recommended, friendly name for this Action. If not present will default to `kind`.\n\nCan only contain letters, numbers, underscore, spaces, and dashes",
                    "pattern": "^[a-zA-Z]([\\w -]*[\\w])?$",
                    "type": "string"
                }
            },
            "propertyOrder": [
                "content",
                "kind",
                "name"
            ],
            "required": [
                "content",
                "kind"
            ],
            "type": "object"
        },
        "RuleSetJSONConfig": {
            "description": "A RuleSet is a \"nested\" set of Rules that can be used to create more complex AND/OR behavior. Think of the outcome of a RuleSet as the result of all of it's Rules (based on condition)",
            "properties": {
                "condition": {
                    "default": "AND",
                    "description": "Under what condition should a set of rules be considered \"successful\"?\n\nIf \"OR\" then ANY triggered rule results in success.\n\nIf \"AND\" then ALL rules must be triggered to result in success.",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "type": "string"
                },
                "rules": {
                    "items": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/RecentActivityRuleJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/RepeatSubmissionJSONConfig"
                            },
                            {
                                "$ref": "#/definitions/AuthorRuleJSONConfig"
                            }
                        ]
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "propertyOrder": [
                "rules",
                "condition"
            ],
            "required": [
                "rules"
            ],
            "type": "object"
        },
        "SubThreshold": {
            "properties": {
                "count": {
                    "default": 1,
                    "description": "The number of activities in each subreddit from the list that will trigger this rule",
                    "minimum": 1,
                    "type": "number"
                },
                "subreddits": {
                    "description": "A list of subreddits (case-insensitive) to look for. Do not include \"r/\" prefix.\n\nEX to match against /r/mealtimevideos and /r/askscience use [\"mealtimevideos\",\"askscience\"]",
                    "examples": [
                        "mealtimevideos",
                        "askscience"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "type": "array"
                }
            },
            "propertyOrder": [
                "count",
                "subreddits"
            ],
            "required": [
                "subreddits"
            ],
            "type": "object"
        }
    },
    "properties": {
        "apiLimitWarning": {
            "default": 250,
            "description": "When Reddit API limit remaining reaches this number context bot will start warning on every poll interval",
            "type": "number"
        },
        "checks": {
            "description": "A list of all the checks that should be run for a subreddit.\n\nChecks are split into two lists -- submission or comment -- based on kind and run independently.\n\nChecks in each list are run in the order found in the configuration.\n\nWhen a check \"passes\", and actions are performed, then all subsequent checks are skipped.",
            "items": {
                "$ref": "#/definitions/CheckJSONConfig"
            },
            "minItems": 1,
            "type": "array"
        },
        "heartbeatInterval": {
            "description": "If present, time in milliseconds between HEARTBEAT log statements with current api limit count. Nice to have to know things are still ticking if there is low activity",
            "type": "number"
        },
        "polling": {
            "$ref": "#/definitions/PollingOptions",
            "description": "You may specify polling options independently for submissions/comments"
        }
    },
    "propertyOrder": [
        "checks",
        "polling",
        "heartbeatInterval",
        "apiLimitWarning"
    ],
    "required": [
        "checks"
    ],
    "type": "object"
}

