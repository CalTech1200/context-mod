<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.0.3/tailwind.min.css"
          integrity="sha512-wl80ucxCRpLkfaCnbM88y4AxnutbGk327762eM9E/rRTvY/ZGAHWMZrYUq66VQBYMIYDFpDdJAOGSLyIPHZ2IQ=="
          crossorigin="anonymous"/>
    <script src="https://code.iconify.design/1/1.0.4/iconify.min.js"></script>
    <link rel="stylesheet" href="/public/themeToggle.css">
    <link rel="stylesheet" href="/public/app.css">
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <!--icons from https://heroicons.com -->
</head>
<body style="user-select: none;" class="bg-gray-900 text-white font-sans">
<div class="min-w-screen min-h-screen bg-gray-800">
    <%- include('partials/title') %>
    <div class="container mx-auto">
        <div class="grid">
            <div class="my-3 pl-2">
                Schema <a href="/config?schema=subreddit" id="subredditSchemaType">Subreddit</a> / <a href="/config?schema=operator" id="operatorSchemaType">Operator</a>  |
                <span class="has-tooltip">
                    <span style="z-index:999; margin-top: 30px;" class='tooltip rounded shadow-lg p-3 bg-gray-100 text-black space-y-2'>
                       <div>Copy + paste your configuration here to get:</div>
                        <ul class="list-inside list-disc">
                            <li>
                                formatting (right click for menu)
                            </li>
                            <li>
                                JSON syntax assist (red squiggly, hover for info)
                            </li>
                            <li>
                                annotated properties (hover for info)
                            </li>
                            <li id="schemaTypeList"></li>
                        </ul>
                        <div>When done editing hit Ctrl+A (Command+A on macOS) to select all text, then copy + paste back into your wiki/file</div>
                    </span>
                    <span class="cursor-help">
                            How To Use
                        <span>
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 class="h-4 w-4 inline-block cursor-help"
                                 fill="none"
                                 viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round"
                                      stroke-linejoin="round"
                                      stroke-width="2"
                                      d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </span>
                    </span>
                </span>
                | <input id="configUrl" class="text-black placeholder-gray-500 rounded mx-2" style="min-width:400px;" placeholder="URL of a config to load"/> <a href="#" id="loadConfig">Load</a>
                <div id="error" class="font-semibold"></div>
            </div>
            <div style="min-height: 80vh" id="editor"></div>
        </div>
    </div>
    <%- include('partials/footer') %>
</div>
<script src="/monaco/dev/vs/loader.js"></script>
<script>
    require.config({ paths: { vs: 'monaco/dev/vs' } });

    const preamble = [
        '// Copy + paste your configuration here to get',
        '// formatting, JSON syntax, annotated properties and'
    ];

    var searchParams = new URLSearchParams(window.location.search);

    let schemaType;
    let schemaFile;
    if(searchParams.get('schema') === 'operator') {
        schemaType = 'operator';
        schemaFile = 'OperatorConfig.json';
        preamble.push('// automatic validation of your OPERATOR configuration');
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your OPERATOR configuration (yellow squiggly)';
        document.querySelector('#operatorSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    } else {
        schemaType = 'subreddit';
        schemaFile = 'App.json';
        preamble.push('// automatic validation of your SUBREDDIT configuration');
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your SUBREDDIT configuration (yellow squiggly)'
        document.querySelector('#subredditSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }

    const schemaUri = `${document.location.origin}/schemas/${schemaFile}`;

    require(['vs/editor/editor.main'], function () {
        const modelUri = monaco.Uri.parse("a://b/foo.json");
        fetch(schemaUri).then((res) => {
            res.json().then((schemaData) => {
                monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
                    validate: true,
                    allowComments: true,
                    trailingCommas: "ignore",
                    schemas: [{
                        uri: schemaUri,
                        fileMatch: [modelUri.toString()],
                        schema: schemaData
                    }]
                });
                var model = monaco.editor.createModel(preamble.join('\r\n'), "json", modelUri);

                document.querySelector('#loadConfig').addEventListener('click', (e) => {
                    e.preventDefault();
                    const newUrl = document.querySelector('#configUrl').value;
                    fetch(newUrl).then((resp) => {
                        if(!resp.ok) {
                            resp.text().then(data => {
                                document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                            });
                        } else {
                            var sp = new URLSearchParams();
                            sp.append('schema', schemaType);
                            sp.append('url', newUrl);
                            history.pushState(null, '', `${window.location.pathname}?${sp.toString()}`);
                            resp.text().then(data => {
                                //model = monaco.editor.createModel(data, "json", modelUri);
                                model.setValue(data);
                            })
                        }
                    });
                });

                let dlUrl = searchParams.get('url');
                if(dlUrl === null && searchParams.get('subreddit') !== null) {
                    dlUrl = `${document.location.origin}/config/content${document.location.search}`
                }
                if(dlUrl !== null) {
                    document.querySelector('#configUrl').value = dlUrl;
                    fetch(dlUrl).then((resp) => {
                        if(!resp.ok) {
                            resp.text().then(data => {
                                document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                            });
                        } else {
                            resp.text().then(data => {
                                model.setValue(data);
                                //model = monaco.editor.createModel(data, "json", modelUri);
                                var editor = monaco.editor.create(document.getElementById('editor'), {
                                    model,
                                    theme: 'vs-dark',
                                    minimap: {
                                        enabled: false
                                    }
                                });
                                editor;
                            })
                        }
                    });
                } else {
                    var editor = monaco.editor.create(document.getElementById('editor'), {
                        model,
                        theme: 'vs-dark',
                        minimap: {
                            enabled: false
                        }
                    });
                    editor;
                }
            })
        })
    });
</script>
</body>
</html>
