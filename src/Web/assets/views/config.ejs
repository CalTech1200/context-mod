<html lang="en">
<head>
    <link rel="stylesheet" href="/public/tailwind.min.css"/>
    <script src="https://code.iconify.design/1/1.0.4/iconify.min.js"></script>
    <link rel="stylesheet" href="/public/themeToggle.css">
    <link rel="stylesheet" href="/public/app.css">
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <% if (format === 'yaml') { %>
    <link href="/public/yaml/entry.css" rel="stylesheet">
    <% } else { %>
        <link rel="stylesheet" data-name="vs/editor/editor.main" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/editor/editor.main.min.css">
    <% } %>
    <!--icons from https://heroicons.com -->
</head>
<body style="user-select: none;" class="bg-gray-900 text-white font-sans">
<div class="min-w-screen min-h-screen bg-gray-800">
    <%- include('partials/title') %>
    <div class="container mx-auto">
        <div class="grid">
            <div class="my-3 pl-2">
                Schema <a href="#" data-schema="subreddit" class="schemaType" id="subredditSchemaType">Subreddit</a> / <a href="#" data-schema="operator" class="schemaType" id="operatorSchemaType">Operator</a>
                | Format <a href="#" class="formatType" data-format="json" id="formatJson">JSON</a> / <a href="#" class="formatType" data-format="yaml" id="formatYaml">YAML</a>
                |
                <span class="has-tooltip">
                    <span style="z-index:999; margin-top: 30px;" class='tooltip rounded shadow-lg p-3 bg-gray-100 text-black space-y-2'>
                       <div>Copy + paste your configuration here to get:</div>
                        <ul class="list-inside list-disc">
                            <li>
                                formatting (right click for menu)
                            </li>
                            <li>
                                JSON syntax assist (red squiggly, hover for info)
                            </li>
                            <li>
                                annotated properties (hover for info)
                            </li>
                            <li id="schemaTypeList"></li>
                        </ul>
                        <div>When done editing hit Ctrl+A (Command+A on macOS) to select all text, then copy + paste back into your wiki/file</div>
                    </span>
                    <span class="cursor-help">
                            How To Use
                        <span>
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 class="h-4 w-4 inline-block cursor-help"
                                 fill="none"
                                 viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round"
                                      stroke-linejoin="round"
                                      stroke-width="2"
                                      d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </span>
                    </span>
                </span>
                | <input id="configUrl" class="text-black placeholder-gray-500 rounded mx-2" style="min-width:400px;" placeholder="URL of a config to load"/> <a href="#" id="loadConfig">Load</a>
                <div id="error" class="font-semibold"></div>
                <select style="display:none;" id="schema-selection">
                    <option value="bot.yaml">Bot Configuration</option>
                </select>
                <div style="display:none;" id="breadcrumbs"></div>
            </div>
            <div style="min-height: 80vh" id="editor"></div>
            <div style="user-select: auto" id="problems"></div>
        </div>
    </div>
    <%- include('partials/footer') %>
</div>
<script>
    var searchParams = new URLSearchParams(window.location.search);

    let schemaType;
    let schemaFile;
    if(searchParams.get('schema') === 'operator') {
        window.schemaType = 'operator';
        window.schemaFile = 'OperatorConfig.json';
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your OPERATOR configuration (yellow squiggly)';
        document.querySelector('#operatorSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    } else {
        window.schemaType = 'subreddit';
        window.schemaFile = 'App.json';
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your SUBREDDIT configuration (yellow squiggly)'
        document.querySelector('#subredditSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }

    if(searchParams.get('format') === 'yaml') {
        document.querySelector('#formatYaml').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    } else {
        document.querySelector('#formatJson').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }

    window.addNoErrors = function () {
        const problems = document.getElementById('problems');
        const wrapper = document.createElement('div');
        wrapper.setAttribute('role', 'button');
        const text = document.createElement('div');
        wrapper.classList.add('problem');
        text.classList.add('problem-text');
        text.textContent = 'No errors! :)';
        wrapper.append(text);
        problems.append(wrapper);
    }
</script>
<script defer="defer" src="/public/yaml/entry.js"></script>
<script>
    window.addEventListener('load', function () {

        var searchParams = new URLSearchParams(window.location.search);
        let dlUrl = searchParams.get('url');
        if (dlUrl === null && searchParams.get('subreddit') !== null) {
            dlUrl = `${document.location.origin}/config/content${document.location.search}`
        }

        let currentSchema = searchParams.get('schema') === 'operator' ? 'app' : 'bot',
            currentFormat = searchParams.get('format') === 'yaml' ? 'yaml' : 'json';


        function getFileName() {
            return `${currentSchema}.${currentFormat}`;
        }

        if (dlUrl !== null) {
            // @ts-ignore
            document.querySelector('#configUrl').value = dlUrl;
            fetch(dlUrl).then((resp) => {
                if (!resp.ok) {
                    resp.text().then(data => {
                        document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                    });
                } else {
                    resp.text().then(data => {
                        const oldModel = window.ed.getModel();
                        oldModel.dispose();
                        // @ts-ignore
                        const newModel = window.meditor.createModel(data, currentFormat, window.muri.parse(getFileName()));
                        window.ed.setModel(newModel);
                    })
                }
            });
        } else {
            const preamble = currentFormat === 'yaml' ? [
                '# Copy + paste your configuration here to get',
                '# formatting, JSON syntax, annotated properties and'
            ] : [
                '// Copy + paste your configuration here to get',
                '// formatting, JSON syntax, annotated properties and'
            ];

            const oldModel = window.ed.getModel();
            oldModel.dispose();
            // @ts-ignore
            const newModel = window.meditor.createModel(preamble.join('\r\n'), currentFormat, window.muri.parse(getFileName()));
            window.ed.setModel(newModel);
        }

        document.querySelector('#loadConfig').addEventListener('click', (e) => {
            e.preventDefault();
            // @ts-ignore
            const newUrl = document.querySelector('#configUrl').value;
            fetch(newUrl).then((resp) => {
                if (!resp.ok) {
                    resp.text().then(data => {
                        document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                    });
                } else {
                    var sp = new URLSearchParams();
                    // @ts-ignore
                    sp.set('schema', currentSchema === 'app' ? 'operator' : 'bot');
                    sp.set('format', currentFormat);
                    sp.set('url', newUrl);
                    history.pushState(null, '', `${window.location.pathname}?${sp.toString()}`);
                    resp.text().then(data => {
                        const oldModel = window.ed.getModel();
                        oldModel.dispose();
                        // @ts-ignore
                        const newModel = window.meditor.createModel(data, currentFormat, window.muri.parse(getFileName()));
                        window.ed.setModel(newModel);
                    })
                }
            });
        });

        document.querySelectorAll('.schemaType').forEach(el => {
            el.addEventListener('click', (e) => {
                document.querySelectorAll('.schemaType').forEach(el => {
                    el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
                })
                if (e.target.dataset.schema === 'operator') {
                    currentSchema = 'app';
                    window.schemaType = 'operator';
                    window.schemaFile = 'OperatorConfig.json';
                    document.querySelector('#operatorSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                } else {
                    currentSchema = 'bot';
                    document.querySelector('#subredditSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                    window.schemaType = 'subreddit';
                    window.schemaFile = 'App.json';
                }

                var searchParams = new URLSearchParams(window.location.search);
                searchParams.set('schema', currentSchema === 'app' ? 'operator' : 'bot');
                history.pushState(null, '', `${window.location.pathname}?${searchParams.toString()}`);
                const oldModel = window.ed.getModel();
                const val = oldModel.getValue();
                oldModel.dispose();
                const newModel = window.meditor.createModel(val, currentFormat, window.muri.parse(getFileName()));
                window.ed.setModel(newModel);
            })
        });

        document.querySelectorAll('.formatType').forEach(el => {
            el.addEventListener('click', (e) => {
                document.querySelectorAll('.formatType').forEach(el => {
                    el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
                });

                if (e.target.dataset.format === 'yaml') {
                    currentFormat = 'yaml';
                    document.querySelector('#formatYaml').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                } else {
                    currentFormat = 'json';
                    document.querySelector('#formatJson').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                }

                var searchParams = new URLSearchParams(window.location.search);
                searchParams.set('format', e.target.dataset.format);
                history.pushState(null, '', `${window.location.pathname}?${searchParams.toString()}`);

                const oldModel = window.ed.getModel();
                const val = oldModel.getValue();
                oldModel.dispose();
                const newModel = window.meditor.createModel(val, currentFormat, window.muri.parse(getFileName()));
                window.ed.setModel(newModel);
            })
        });

        window.addEventListener('load', function () {

            const markers = window.meditor.getModelMarkers();
            if (markers.length === 0) {
                window.addNoErrors();
            }

            window.meditor.onDidChangeMarkers(([resource]) => {

                const markers = window.meditor.getModelMarkers({resource});
                if (markers.length === 0) {
                    window.addNoErrors();
                }
            });
        });
    });
</script>
</body>
</html>
