<html lang="en">
<head>
    <link rel="stylesheet" href="/public/tailwind.min.css"/>
    <script src="https://code.iconify.design/1/1.0.4/iconify.min.js"></script>
    <link rel="stylesheet" href="/public/themeToggle.css">
    <link rel="stylesheet" href="/public/app.css">
    <title><%= title %></title>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <% if (format === 'yaml') { %>
    <link href="/public/yaml/entry.css" rel="stylesheet">
    <% } %>
    <!--icons from https://heroicons.com -->
</head>
<body style="user-select: none;" class="bg-gray-900 text-white font-sans">
<div class="min-w-screen min-h-screen bg-gray-800">
    <%- include('partials/title') %>
    <div class="container mx-auto">
        <div class="grid">
            <div class="my-3 pl-2">
                Schema <a href="#" data-schema="subreddit" class="schemaType" id="subredditSchemaType">Subreddit</a> / <a href="#" data-schema="operator" class="schemaType" id="operatorSchemaType">Operator</a>
                | Format <a href="#" class="formatType" data-format="json" id="formatJson">JSON</a> / <a href="#" class="formatType" data-format="yaml" id="formatYaml">YAML</a>
                |
                <span class="has-tooltip">
                    <span style="z-index:999; margin-top: 30px;" class='tooltip rounded shadow-lg p-3 bg-gray-100 text-black space-y-2'>
                       <div>Copy + paste your configuration here to get:</div>
                        <ul class="list-inside list-disc">
                            <li>
                                formatting (right click for menu)
                            </li>
                            <li>
                                JSON syntax assist (red squiggly, hover for info)
                            </li>
                            <li>
                                annotated properties (hover for info)
                            </li>
                            <li id="schemaTypeList"></li>
                        </ul>
                        <div>When done editing hit Ctrl+A (Command+A on macOS) to select all text, then copy + paste back into your wiki/file</div>
                    </span>
                    <span class="cursor-help">
                            How To Use
                        <span>
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 class="h-4 w-4 inline-block cursor-help"
                                 fill="none"
                                 viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round"
                                      stroke-linejoin="round"
                                      stroke-width="2"
                                      d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                            </svg>
                        </span>
                    </span>
                </span>
                | <input id="configUrl" class="text-black placeholder-gray-500 rounded mx-2" style="min-width:400px;" placeholder="URL of a config to load"/> <a href="#" id="loadConfig">Load</a>
                <div id="error" class="font-semibold"></div>
                <select style="display:none;" id="schema-selection">
                    <option value="bot.yaml">Bot Configuration</option>
                </select>
                <div style="display:none;" id="breadcrumbs"></div>
            </div>
            <div style="min-height: 80vh" id="editor"></div>
            <div style="user-select: auto" id="problems"></div>
        </div>
    </div>
    <%- include('partials/footer') %>
</div>
<script>
    var searchParams = new URLSearchParams(window.location.search);

    let schemaType;
    let schemaFile;
    if(searchParams.get('schema') === 'operator') {
        window.schemaType = 'operator';
        window.schemaFile = 'OperatorConfig.json';
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your OPERATOR configuration (yellow squiggly)';
        document.querySelector('#operatorSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    } else {
        window.schemaType = 'subreddit';
        window.schemaFile = 'App.json';
        document.querySelector('#schemaTypeList').innerHTML = 'automatic validation of your SUBREDDIT configuration (yellow squiggly)'
        document.querySelector('#subredditSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }

    if(searchParams.get('format') === 'yaml') {
        document.querySelector('#formatYaml').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    } else {
        document.querySelector('#formatJson').classList.add('font-bold', 'no-underline', 'pointer-events-none');
    }

    document.querySelectorAll('.formatType').forEach(el => {
        el.addEventListener('click', (e) => {
            var searchParams = new URLSearchParams(window.location.search);
            searchParams.set('format', e.target.dataset.format);
            const newUrl = `${window.location.pathname}?${searchParams.toString()}`;
            window.location.href = newUrl;
        })
    });

    window.addNoErrors = function () {
        const problems = document.getElementById('problems');
        const wrapper = document.createElement('div');
        wrapper.setAttribute('role', 'button');
        const text = document.createElement('div');
        wrapper.classList.add('problem');
        text.classList.add('problem-text');
        text.textContent = 'No errors! :)';
        wrapper.append(text);
        problems.append(wrapper);
    }
</script>
<% if (format === 'json') { %>
<!--Use CDN for loading monaco https://stackoverflow.com/a/63179814/1469797 -->
<!-- Reduces app size (docker) by a big chunk to not serve it locally AND it's not necessary for essential operation -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs/loader.min.js"></script>
<script>
    require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.26.1/min/vs' }});

    const preamble = [
        '// Copy + paste your configuration here to get',
        '// formatting, JSON syntax, annotated properties and'
    ];

    var searchParams = new URLSearchParams(window.location.search);

    const schemaUri = `${document.location.origin}/schemas/${window.schemaFile}`;

    require(['vs/editor/editor.main'], function () {
        const modelUri = monaco.Uri.parse("a://b/foo.json");
        fetch(schemaUri).then((res) => {
            res.json().then((schemaData) => {
                monaco.languages.json.jsonDefaults.setDiagnosticsOptions({
                    validate: true,
                    allowComments: true,
                    trailingCommas: "ignore",
                    schemas: [{
                        uri: schemaUri,
                        fileMatch: [modelUri.toString()],
                        schema: schemaData
                    }]
                });
                var model = monaco.editor.createModel(preamble.join('\r\n'), "json", modelUri);

                document.querySelector('#loadConfig').addEventListener('click', (e) => {
                    e.preventDefault();
                    const newUrl = document.querySelector('#configUrl').value;
                    fetch(newUrl).then((resp) => {
                        if(!resp.ok) {
                            resp.text().then(data => {
                                document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                            });
                        } else {
                            var sp = new URLSearchParams();
                            sp.append('schema', window.schemaType);
                            sp.append('url', newUrl);
                            history.pushState(null, '', `${window.location.pathname}?${sp.toString()}`);
                            resp.text().then(data => {
                                //model = monaco.editor.createModel(data, "json", modelUri);
                                model.setValue(data);
                            })
                        }
                    });
                });

                let dlUrl = searchParams.get('url');
                if(dlUrl === null && searchParams.get('subreddit') !== null) {
                    dlUrl = `${document.location.origin}/config/content${document.location.search}`
                }
                if(dlUrl !== null) {
                    document.querySelector('#configUrl').value = dlUrl;
                    fetch(dlUrl).then((resp) => {
                        if(!resp.ok) {
                            resp.text().then(data => {
                                document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                            });
                        } else {
                            resp.text().then(data => {
                                model.setValue(data);
                                //model = monaco.editor.createModel(data, "json", modelUri);
                                var editor = monaco.editor.create(document.getElementById('editor'), {
                                    model,
                                    theme: 'vs-dark',
                                    minimap: {
                                        enabled: false
                                    }
                                });
                                editor;
                            })
                        }
                    });
                } else {
                    var editor = monaco.editor.create(document.getElementById('editor'), {
                        model,
                        theme: 'vs-dark',
                        minimap: {
                            enabled: false
                        }
                    });
                    editor;
                }

                const markers = monaco.editor.getModelMarkers();
                if(markers.length === 0) {
                    window.addNoErrors();
                }

                monaco.editor.onDidChangeMarkers(([resource]) => {
                    const problems = document.getElementById('problems');
                    const markers = monaco.editor.getModelMarkers({ resource });
                    while (problems.lastChild) {
                        problems.lastChild.remove();
                    }
                    if(markers.length === 0) {
                        window.addNoErrors();
                    }
                    for (const marker of markers) {
                        const wrapper = document.createElement('div');
                        wrapper.setAttribute('role', 'button');
                        const codicon = document.createElement('div');
                        const text = document.createElement('div');
                        wrapper.classList.add('problem');
                        codicon.classList.add('codicon', 'codicon-warning');
                        text.classList.add('problem-text');
                        text.textContent = marker.message;
                        wrapper.append(codicon, text);
                        wrapper.addEventListener('click', () => {
                            editor.setPosition({ lineNumber: marker.startLineNumber, column: marker.startColumn });
                            editor.focus();
                        });
                        problems.append(wrapper);
                    }
                });
            })
        })
    });

    document.querySelectorAll('.schemaType').forEach(el => {
        el.addEventListener('click', (e) => {
            var searchParams = new URLSearchParams(window.location.search);
            searchParams.set('schema', e.target.dataset.schema);
            const newUrl = `${window.location.pathname}?${searchParams.toString()}`;
            window.location.href = newUrl;
        })
    });
</script>
<% } else { %>
<script defer="defer" src="/public/yaml/entry.js"></script>
<script>
    var searchParams = new URLSearchParams(window.location.search);
    let dlUrl = searchParams.get('url');
    if(dlUrl === null && searchParams.get('subreddit') !== null) {
        dlUrl = `${document.location.origin}/config/content${document.location.search}`
    }

    if(searchParams.get('schema') === 'operator') {
        // @ts-ignore
        document.querySelector('#schema-selection').value = 'app.yaml';
    }

    if(dlUrl !== null) {
        // @ts-ignore
        document.querySelector('#configUrl').value = dlUrl;
        fetch(dlUrl).then((resp) => {
            if(!resp.ok) {
                resp.text().then(data => {
                    document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                });
            } else {
                resp.text().then(data => {
                    const oldModel = window.ed.getModel();
                    oldModel.dispose();
                    // @ts-ignore
                    const newModel = window.meditor.createModel(data, 'yaml', muri.parse(document.querySelector('#schema-selection').value));
                    window.ed.setModel(newModel);
                })
            }
        });
    }

    document.querySelector('#loadConfig').addEventListener('click', (e) => {
        e.preventDefault();
        // @ts-ignore
        const newUrl = document.querySelector('#configUrl').value;
        fetch(newUrl).then((resp) => {
            if(!resp.ok) {
                resp.text().then(data => {
                    document.querySelector('#error').innerHTML = `Error occurred while fetching configuration => ${data}`
                });
            } else {
                var sp = new URLSearchParams();
                // @ts-ignore
                sp.append('schema', document.querySelector('#schema-selection').value === 'bot.yaml' ? 'bot' : 'operator' );
                sp.append('url', newUrl);
                sp.append('format', 'yaml');
                history.pushState(null, '', `${window.location.pathname}?${sp.toString()}`);
                resp.text().then(data => {
                    const oldModel = window.ed.getModel();
                    oldModel.dispose();
                    // @ts-ignore
                    const newModel = window.meditor.createModel(data, 'yaml', window.muri.parse(document.querySelector('#schema-selection').value));
                    window.ed.setModel(newModel);
                })
            }
        });
    });

    document.querySelectorAll('.schemaType').forEach(el => {
        el.addEventListener('click', (e) => {
            document.querySelectorAll('.schemaType').forEach(el => {
                el.classList.remove('font-bold', 'no-underline', 'pointer-events-none');
            })
            if(e.target.dataset.schema === 'operator') {
                window.schemaType = 'operator';
                window.schemaFile = 'OperatorConfig.json';
                document.querySelector('#operatorSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
            } else {
                document.querySelector('#subredditSchemaType').classList.add('font-bold', 'no-underline', 'pointer-events-none');
                window.schemaType = 'subreddit';
                window.schemaFile = 'App.json';
            }

            var searchParams = new URLSearchParams(window.location.search);
            searchParams.set('schema', e.target.dataset.schema === 'operator' ? 'operator' : 'bot')
            history.pushState(null, '', `${window.location.pathname}?${searchParams.toString()}`);
            const oldModel = window.ed.getModel();
            const val = oldModel.getValue();
            oldModel.dispose();
            const newModel = window.meditor.createModel(val, 'yaml', window.muri.parse(e.target.dataset.schema === 'operator' ? 'app.yaml' : 'bot.yaml'));
            window.ed.setModel(newModel);
        })
    });

    var addNoErrors = function () {
        const problems = document.getElementById('problems');
        const wrapper = document.createElement('div');
        wrapper.setAttribute('role', 'button');
        const text = document.createElement('div');
        wrapper.classList.add('problem');
        text.classList.add('problem-text');
        text.textContent = 'No errors! :)';
        wrapper.append(text);
        problems.append(wrapper);
    }
    window.addEventListener('load', function () {

        const markers = window.meditor.getModelMarkers();
        if(markers.length === 0) {
            window.addNoErrors();
        }

    window.meditor.onDidChangeMarkers(([resource]) => {

        const markers = window.meditor.getModelMarkers({resource});
        if(markers.length === 0) {
            window.addNoErrors();
        }
    });
    });
</script>
<% } %>
</body>
</html>
