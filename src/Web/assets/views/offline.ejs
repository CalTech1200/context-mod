<html>
<%- include('partials/head', {title: undefined}) %>
<body class="bg-gray-900 text-white font-sans">
<div class="min-w-screen min-h-screen">
    <%- include('partials/header') %>
    <%- include('partials/botsTab') %>
    <div class="container mx-auto">
        <%- include('partials/subredditsTab') %>
        <div class="grid">
            <div class="bg-gray-700">
                <div class="pb-6 md:px-7">
                    <div class="sub active" data-subreddit="All" data-bot="All">
                        Instance is currently <b>OFFLINE</b>
                        <div class="flex items-center justify-between flex-wrap">
                            <div class="inline-flex items-center">
                            </div>
                            <%- include('partials/logSettings') %>
                        </div>
                        <%- include('partials/loadingIcon') %>
                        <div data-subreddit="All" class="logs font-mono text-sm">
                            <% logs.forEach(function (logEntry){ %>
                                <%- logEntry %>
                            <% }) %>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<%- include('partials/footer') %>
<%- include('partials/instanceTabJs') %>
<%- include('partials/logSettingsJs') %>
<script src="https://cdn.socket.io/4.1.2/socket.io.min.js" integrity="sha384-toS6mmwu70G0fw54EGlWWeA4z3dyJ+dlXBtSURSKN4vyRFOcxd3Bzjj/AoOwY+Rg" crossorigin="anonymous"></script>
<script>
    window.sort = 'desc';

    const INSTANCE_NAME_LOG_REGEX = /\|(.+?)\|/;
    const parseALogName = (reg) => {
        return (val) => {
            const matches = val.match(reg);
            if (matches === null) {
                return undefined;
            }
            return matches[1];
        }
    }
    const parseInstanceLogName = parseALogName(INSTANCE_NAME_LOG_REGEX);

    let socket = io({
        reconnectionAttempts: 5, // bail after 5 attempts
    });

    const limit = Number.parseInt(document.querySelector(`[data-type="limit"]`).value);

    const instanceURLSP = new URLSearchParams(window.location.search);
    const instanceSP = instanceURLSP.get('instance');

    socket.on("connect", () => {
        document.body.classList.add('connected');
        socket.on("log", data => {
            const el = document.querySelector(`.sub`);
            const bot = parseInstanceLogName(data);
            if(bot === instanceSP) {
                const logContainer = el.querySelector(`.logs`);
                let existingLogs;
                if(window.sort === 'desc') {
                    logContainer.insertAdjacentHTML('afterbegin', data);
                    existingLogs = Array.from(el.querySelectorAll(`.logs .logLine`));
                    logContainer.replaceChildren(...existingLogs.slice(0, limit));
                } else {
                    logContainer.insertAdjacentHTML('beforeend', data);
                    existingLogs = Array.from(el.querySelectorAll(`.logs .logLine`));
                    const overLimit = limit - existingLogs.length;
                    logContainer.replaceChildren(...existingLogs.slice(overLimit -1, limit));
                }
            }
        });
    });
</script>
</body>
